testcases

controllers.Players.createPlayer('testGuy', 'test', 'person', 'one', 'test@email.com');
var johndoe = models.Player.playerModel.findByUsername('testGuy', function(err, user){
	if(err)
	{
		console.log("error finding player" + err);
	}
	else
	{
		console.log("johns id is " + user);
	}

	return user;
});

// Creating more users manually
var janedoe = new models.Player.playerModel({
  username: 'testGuy2',
  password: 'test2',
  name: 	{
			first: 'person',
			last: 'two'
		},
  email:   	'test2@email.com'
});
janedoe.save(function (err) {if (err) console.log ('Error on save! of player2 '  + err)});

var gameSession1 = new models.Session.sessionModel({
  owner: johndoe.id,
  name:	'session1',
  background:   {
			image:  'path/to/image',
			x: 1,
			y: 1
		},
  tokens: 	[
			{
				image: 'path/to/image',
				x: 2,
				y: 2
			},
			{
				image: 'path/to/image',
				x: 3,
				y: 3
			}
		]

});
gameSession1.save(function (err) {if (err) console.log ('Error on save! of game session ' + err)});


var sessionPlayer1 = new models.Session.sessionPlayerModel({
  sessionId: gameSession1.id,
  playerId: johndoe.id

});
sessionPlayer1.save(function (err) {if (err) console.log ('Error on save! of sessionplayer1 ' + err)});

var sessionPlayer2 = new models.Session.sessionPlayerModel({
  sessionId: gameSession1.id,
  playerId: janedoe.id

});
sessionPlayer2.save(function (err) {if (err) console.log ('Error on save of sessionplayer2! ' + err)});


var sessionLog1 = new models.Session.sessionLogModel({
  sessionId:	gameSession1.id,
  events: 	[
			{
				type: 'move',
				token: 'png1',
				originalX: 3,
				originalY: 3,
				x: 4,
				y: 4
			},
			{
				type: 'move',
				token: 'png2',
				originalX: 7,
				originalY: 7,
				x: 8,
				y: 8
			},
			{
				type: 'move',
				token: 'png1',
				originalX: 3,
				originalY: 3,
				x: 4,
				y: 4
			}
		]
});
sessionLog1.save(function (err) {if (err) console.log ('Error on save of session log! ' + err)});


// In case the browser connects before the database is connected, the
// user will see this message.
var found = ['DB Connection not yet established.  Try again later.  Check the console output for error messages if this persists.'];

// Create a rudimentary http server.  (Note, a real web application
// would use a complete web framework and router like express.js). 
// This is effectively the main interaction loop for the application. 
// As new http requests arrive, the callback function gets invoked.
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  createWebpage(req, res);
}).listen(theport);

function createWebpage (req, res) {

models.Player.playerModel.findByUsername('testGuy').exec(function(err, user){
	if(err)
	{
		console.log("web error finding player" + err);
	}
	else
	{
		console.log("web johns id is " + user);
	}

});
  // Let's find all the documents
  models.Player.playerModel.find({}).exec(function(err, result) { 
    if (!err) { 
      res.write(html1 + JSON.stringify(result, undefined, 2) +  html2 + result.length + html3);
    
      var query = models.Player.playerModel.find({'name.first': 'person'}); // (ok in this example, it's all entries)
      query.where('name.last').equals('two');
      query.exec(function(err, result) {
	if (!err) {
	  res.end(html4 + JSON.stringify(result, undefined, 2) + html5 + result.length + html6);
	} else {
	  res.end('Error in second query. ' + err)
	}
      });
    } else {
      res.end('Error in first query. ' + err)
    };
  });
  models.Session.sessionModel.find({}).exec(function(err, result) { 
    if (!err) { 
      res.write(html7 + JSON.stringify(result, undefined, 2) +  html8 + result.length + html9);
    
      var query2 = models.Session.sessionModel.find({'owner': johndoe.id}); // (ok in this example, it's all entries)
      query2.exec(function(err, result) {
	if (!err) {
	  res.end(html10 + JSON.stringify(result, undefined, 2) + html11 + result.length + html12);
	} else {
	  res.end('Error in second query. ' + err)
	}
      });
    } else {
      res.end('Error in first query. ' + err)
    };
  });
  models.Session.sessionPlayerModel.find({}).exec(function(err, result) { 
    if (!err) { 
      res.write(html13 + JSON.stringify(result, undefined, 2) +  html14 + result.length + html15);
    } else {
      res.end('Error in first query. ' + err)
    };
  });
  models.Session.sessionLogModel.find({}).exec(function(err, result) { 
    if (!err) { 
      res.write(html16 + JSON.stringify(result, undefined, 2) +  html17 + result.length + html18);
    } else {
      res.end('Error in first query. ' + err)
    };
  });
}

// Tell the console we're getting ready.
// The listener in http.createServer should still be active after these messages are emitted.
console.log('http server will be listening on port %d', theport);
console.log('CTRL+C to exit');

//
// House keeping.

//
// The rudimentary HTML content in three pieces.
var html1 = '<title> hello-mongoose: MongoLab MongoDB Mongoose Node.js Demo on Heroku </title> \
<head> \
<style> body {color: #394a5f; font-family: sans-serif} </style> \
</head> \
<body> \
<h1> hello-mongoose: MongoLab MongoDB Mongoose Node.js Demo on Heroku </h1> \
See the <a href="https://devcenter.heroku.com/articles/nodejs-mongoose">supporting article on the Dev Center</a> to learn more about data modeling with Mongoose. \
<br\> \
<br\> \
<br\> <h2> All Documents in MonogoDB database </h2> <pre><code> ';
var html2 = '</code></pre> <br\> <i>';
var html3 = ' documents. </i> <br\> <br\>';
var html4 = '<h2> Queried (name.first = "person" and name.last = "two") Documents in MonogoDB database </h2> <pre><code> ';
var html5 = '</code></pre> <br\> <i>';
var html6 = ' documents. </i> <br\> <br\> \
<br\> <br\> <center><i> Demo code available at <a href="http://github.com/mongolab/hello-mongoose">github.com</a> </i></center>';

var html7 = '<h2> All Documents in session </h2> <pre><code> ';
var html8 = '</code></pre> <br\> <i>';
var html9 = ' documents. </i> <br\> <br\>';
var html10 = '<h2> Queried (session.owner = "johndoe.id") Documents in MonogoDB database </h2> <pre><code> ';
var html11 = '</code></pre> <br\> <i>';
var html12 = ' documents. </i> <br\> <br\>';

var html13 = '<h2> All Documents in session </h2> <pre><code> ';
var html14 = '</code></pre> <br\> <i>';
var html15 = ' documents. </i> <br\> <br\>';

var html16 = '<h2> All Documents in session </h2> <pre><code> ';
var html17 = '</code></pre> <br\> <i>';
var html18 = ' documents. </i> <br\> <br\>';
